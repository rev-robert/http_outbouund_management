<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>sys_outbound_http_log</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="sys_outbound_http_log">response_status&gt;199^response_status&lt;300^EQ<item endquery="false" field="response_status" goto="false" newquery="false" operator="&gt;" or="false" value="199"/>
            <item endquery="false" field="response_status" goto="false" newquery="false" operator="&lt;" or="false" value="300"/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>Generate Failure Event</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
	
	var parmMessage = '';
	var parmFunction = '';
	var queue = '';
	
	var util = new x_12232_http_mgmt.utilHTTPOutboundManagement();
	
	var grRESTMessageFunction = util.getRESTFunction(current.url.toString());
	if (grRESTMessageFunction.next()) {
		parmFunction = grRESTMessageFunction.getLink();
		var grRESTMessage = new GlideRecord('sys_rest_message');
		grRESTMessage.get(grRESTMessageFunction.rest_message.toString());
		parmMessage = grRESTMessage.getLink();
	}  // if (grRESTMessageFunction.next())
	else {
		var grSOAPMessageFunction = util.getSOAPFunction(current.url.toString());
		if (grSOAPMessageFunction.next()) {
			parmFunction = grSOAPMessageFunction.getLink();
			var grSOAPMessage = new GlideRecord('sys_soap_message');
			grSOAPMessage.get(grSOAPMessageFunction.soap_message.toString());
			parmMessage = grSOAPMessage.getLink();
		}  // if (grSOAPMessageFunction.next())
	}  // else if (grRESTMessageFunction.next())
	
	gs.eventQueue('x_12232_http_mgmt.http_outbound.failure', current, parmMessage, parmFunction, queue);

})(current, previous);

function findMessageFunction (urlEndpoint, parmMessage, parmFunction) {
	
	
}  // findMessageFunction

function isRESTFunction (urlEndpoint, parmMessage, parmFunction) {
	var boolIsREST = false;
	var grRESTMessageFunction = new GlideRecord('sys_rest_message_fn');
	grRESTMessageFunction.addQuery('rest_endpoint', urlEndpoint);
	grRESTMessageFunction.query();
	if (grRESTMessageFunction.next()) {
		parmFunction = grRESTMessageFunction.getLink();
		var grRESTMessage = new GlideRecord('sys_rest_message');
		grRESTMessage.get(grRESTMessageFunction.rest_message.toString());
		parmMessage = grRESTMessage.getLink();
		boolIsREST = true;
	}  // if (grRESTMessageFunction.next())
	return boolIsREST;
}  // isRESTFunction

function isSOAPFunction (urlEndpoint, parmMessage, parmFunction) {
	var boolIsSOAP= false;
	var grSOAPMessageFunction = new GlideRecord('sys_soap_message_function');
	grSOAPMessageFunction.addQuery('soap_endpoint', urlEndpoint);
	grSOAPMessageFunction.query();
	if (grSOAPMessageFunction.next()) {
		parmFunction = grSOAPMessageFunction.getLink();
		var grSOAPMessage = new GlideRecord('sys_soap_message');
		grSOAPMessage.get(grSOAPMessageFunction.soap_message.toString());
		parmMessage = grSOAPMessage.getLink();
		boolIsSOAP = true;
	}  // if (grSOAPMessageFunction.next())
	return boolIsSOAP;
}  // isSOAPFunction]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>robert.polickoski</sys_created_by>
        <sys_created_on>2019-05-17 19:11:30</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>f9c49420dba5b3001b5cf7fdbf9619a4</sys_id>
        <sys_mod_count>9</sys_mod_count>
        <sys_name>Generate Failure Event</sys_name>
        <sys_overrides/>
        <sys_package display_value="HTTP_Outbound_Management" source="x_12232_http_mgmt">4669c39cdba1b3001b5cf7fdbf9619da</sys_package>
        <sys_policy/>
        <sys_scope display_value="HTTP_Outbound_Management">4669c39cdba1b3001b5cf7fdbf9619da</sys_scope>
        <sys_update_name>sys_script_f9c49420dba5b3001b5cf7fdbf9619a4</sys_update_name>
        <sys_updated_by>robert.polickoski</sys_updated_by>
        <sys_updated_on>2019-05-19 15:02:51</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=f9c49420dba5b3001b5cf7fdbf9619a4"/>
</record_update>
